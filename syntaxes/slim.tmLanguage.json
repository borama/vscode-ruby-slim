{
  "fileTypes": [
    "slim",
    "skim"
  ],
  "foldingStartMarker": "^\\s*([-%#\\:\\.\\w\\=].*)\\s$",
  "foldingStopMarker": "^\\s*$",
  "keyEquivalent": "^~S",
  "name": "Slim",
  "patterns": [
    {
      "begin": "^(\\s*)(ruby):$",
      "beginCaptures": {
        "2": {
          "name": "constant.language.name.ruby.filter.slim"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "meta.filter.slim source.ruby.embedded.slim",
      "patterns": [
        {
          "include": "source.ruby"
        }
      ]
    },
    {
      "begin": "^(\\s*)(javascript).*:$",
      "beginCaptures": {
        "2": {
          "name": "constant.language.name.javascript.filter.slim"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "meta.filter.slim source.js.embedded.slim",
      "patterns": [
        {
          "include": "source.js"
        }
      ]
    },
    {
      "begin": "^(---)\\s*\\n",
      "beginCaptures": {
        "1": {
          "name": "storage.frontmatter.slim"
        }
      },
      "end": "^(---)\\s*\\n",
      "endCaptures": {
        "1": {
          "name": "storage.frontmatter.slim"
        }
      },
      "name": "source.yaml.meta.slim",
      "patterns": [
        {
          "include": "source.yaml"
        }
      ]
    },
    {
      "begin": "^(\\s*)(coffee).*:$",
      "beginCaptures": {
        "2": {
          "name": "constant.language.name.coffeescript.filter.slim"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "meta.filter.slim source.coffee.embedded.slim",
      "patterns": [
        {
          "include": "source.coffee"
        }
      ]
    },
    {
      "begin": "^(\\s*)(markdown):$",
      "beginCaptures": {
        "2": {
          "name": "constant.language.name.markdown.filter.slim"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "meta.filter.slim text.html.markdown.embedded.slim",
      "patterns": [
        {
          "include": "text.html.markdown"
        }
      ]
    },
    {
      "begin": "^(\\s*)(css).*:$",
      "beginCaptures": {
        "2": {
          "name": "constant.language.name.css.filter.slim"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "meta.filter.slim source.css.embedded.slim",
      "patterns": [
        {
          "include": "source.css"
        }
      ]
    },
    {
      "begin": "^(\\s*)(sass).*:$",
      "beginCaptures": {
        "2": {
          "name": "constant.language.name.sass.filter.slim"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "meta.filter.slim source.sass.embedded.slim",
      "patterns": [
        {
          "include": "source.sass"
        }
      ]
    },
    {
      "begin": "^(\\s*)(scss).*:$",
      "beginCaptures": {
        "2": {
          "name": "constant.language.name.scss.filter.slim"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "meta.filter.slim source.scss.embedded.slim",
      "patterns": [
        {
          "include": "source.css.scss"
        }
      ]
    },
    {
      "begin": "^(\\s*)(less).*:$",
      "beginCaptures": {
        "2": {
          "name": "constant.language.name.less.filter.slim"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "meta.filter.slim source.less.embedded.slim",
      "patterns": [
        {
          "include": "source.less"
        }
      ]
    },
    {
      "begin": "^(\\s*)(erb):$",
      "beginCaptures": {
        "2": {
          "name": "constant.language.name.erb.filter.slim"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "meta.filter.slim text.html.erb.embedded.slim",
      "patterns": [
        {
          "include": "text.html.erb"
        }
      ]
    },
    {
      "comment": "HTML comment",
      "begin": "^(\\s*)((/!)\\s*.*)$",
      "beginCaptures": {
        "2": {
          "name": "comment.line.slash.slim"
        },
        "3": {
          "name": "punctuation.definition.comment.slim"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "comment.block.html.slim"
    },
    {
      "comment": "IE conditional comment",
      "begin": "^(\\s*)((/)((\\[).*(\\])).*)$",
      "beginCaptures": {
        "2": {
          "name": "comment.line.slash.slim"
        },
        "3": {
          "name": "punctuation.definition.comment.slim"
        },
        "4": {
          "name": "meta.brackets.slim"
        },
        "5": {
          "name": "punctuation.section.brackets.begin.slim"
        },
        "6": {
          "name": "punctuation.section.brackets.end.slim"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "comment.block.slim"
    },
    {
      "comment": "Slim comment",
      "begin": "^(\\s*)((/)\\s*.*)$",
      "beginCaptures": {
        "2": {
          "name": "comment.line.slash.slim"
        },
        "3": {
          "name": "punctuation.definition.comment.slim"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "comment.block.slim"
    },
    {
      "begin": "^\\s*(?=-)",
      "end": "$",
      "patterns": [
        {
          "include": "#rubyline"
        }
      ]
    },
    {
      "begin": "(?==+|~)",
      "end": "$",
      "patterns": [
        {
          "include": "#rubyline"
        }
      ]
    },
    {
      "include": "#splat-attribute"
    },
    {
      "include": "#interpolated-ruby"
    },
    {
      "include": "#verbatim-text"
    },
    {
      "include": "#inline-html"
    },
    {
      "comment": "Doctypes",
      "match": "^\\s*(doctype)\\s+.*(\\n|$)",
      "captures": {
        "0": {
          "name": "meta.tag.sgml.doctype.slim"
        }
      }
    },
    {
      "begin": "(\\s*)(?:([\\w-]+)|(\\.)((?:[\\w-]|(?::(?!\\s)))+(?:/\\d+)?)|(#)((?:[\\w-]|(?::(?!\\s)))+(?:/\\d+)?))",
      "end": "$|(:)(?=\\s)",
      "name": "meta.tag.slim",
      "beginCaptures": {
        "2": {
          "name": "entity.name.tag.slim"
        },
        "3": {
          "name": "punctuation.definition.attribute.class.slim"
        },
        "4": {
          "name": "entity.other.attribute-name.class.html"
        },
        "5": {
          "name": "punctuation.definition.attribute.id.slim"
        },
        "6": {
          "name": "entity.other.attribute-name.id.html"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.end.slim"
        }
      },
      "patterns": [
        {
          "include": "#xml-namespace"
        },
        {
          "include": "#root-class-id-tag"
        },
        {
          "include": "#attribute-wrapper"
        },
        {
          "include": "#splat-attribute"
        },
        {
          "include": "#whitespace-modifier"
        },
        {
          "include": "#rubyline"
        },
        {
          "include": "#tag-attribute"
        },
        {
          "include": "#whitespace"
        },
        {
          "include": "#closed-tag-terminator"
        },
        {
          "include": "#verbatim-text"
        },
        {
          "include": "#inline-html"
        },
        {
          "include": "#inline-text"
        }
      ]
    },
    {
      "captures": {
        "1": {
          "name": "meta.escape.slim"
        }
      },
      "match": "^\\s*(\\\\.)"
    },
    {
      "begin": "^\\s*(?=\\||')",
      "end": "$",
      "patterns": [
        {
          "include": "#interpolated-ruby"
        },
        {
          "include": "text.html.basic"
        }
      ]
    }
  ],
  "repository": {
    "attribute-wrapper": {
      "patterns": [
        {
          "include": "#attribute-wrapper-parens"
        },
        {
          "include": "#attribute-wrapper-brackets"
        },
        {
          "include": "#attribute-wrapper-braces"
        }
      ]
    },
    "attribute-wrapper-braces": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.braces.begin.slim"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.braces.end.slim"
        }
      },
      "name": "meta.braces.slim",
      "patterns": [
        {
          "include": "#tag-attribute"
        }
      ]
    },
    "attribute-wrapper-brackets": {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.brackets.begin.slim"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.brackets.end.slim"
        }
      },
      "name": "meta.brackets.slim",
      "patterns": [
        {
          "include": "#tag-attribute"
        }
      ]
    },
    "attribute-wrapper-parens": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.slim"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.slim"
        }
      },
      "name": "meta.parens.slim",
      "patterns": [
        {
          "include": "#tag-attribute"
        }
      ]
    },
    "boolean-attribute-value": {
      "begin": "true|false|nil",
      "end": "(?=\\s)|$",
      "name": "constant.language.slim"
    },
    "continuation": {
      "captures": {
        "1": {
          "name": "punctuation.separator.continuation.slim"
        }
      },
      "match": "([\\\\,])\\s*\\n"
    },
    "closed-tag-terminator": {
      "match": "\\s*/\\s*",
      "name": "punctuation.terminator.tag.slim"
    },
    "delimited-ruby-group": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.group.begin.slim"
        }
      },
      "end": "(\\))(?=(\\s|\\]|\\}$))",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.group.end.slim"
        }
      },
      "name": "meta.embedded.slim meta.string.ruby source.ruby.embedded.slim",
      "contentName": "meta.source.ruby",
      "patterns": [
        {
          "include": "source.ruby"
        }
      ]
    },
    "entities": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.html"
            },
            "3": {
              "name": "punctuation.definition.entity.html"
            }
          },
          "match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
          "name": "constant.character.entity.html"
        },
        {
          "match": "&",
          "name": "invalid.illegal.bad-ampersand.html"
        }
      ]
    },
    "html-attribute-in-filter": {
      "begin": "\\s*([\\w-]+)",
      "beginCaptures": {
        "1": {
          "name": "entity.other.attribute-name.slim"
        }
      },
      "end": "(?=:)",
      "patterns": [
        {
          "match": "\\s*=\\s*",
          "name": "punctuation.separator.key-value.slim"
        },
        {
          "include": "#string-double-quoted"
        },
        {
          "include": "#string-single-quoted"
        }
      ]
    },
    "inline-html": {
      "begin": "(?=</?[\\w\\d\\:]+)",
      "end": "$|\\/\\>",
      "contentName": "meta.embedded.slim text.html.embedded.slim",
      "patterns": [
        {
          "include": "text.html.basic"
        },
        {
          "include": "#interpolated-ruby"
        }
      ]
    },
    "inline-text": {
      "begin": "(?=.)",
      "end": "(?<!\\\\\\n)$",
      "name": "meta.embedded.slim text.html.embedded.slim",
      "patterns": [
        {
          "include": "#interpolated-ruby"
        },
        {
          "match": "([^#]|\\\\#)*\\n"
        }
      ]
    },
    "interpolated-ruby": {
      "begin": "(?<!\\\\)#\\{{1,2}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.interpolation.begin.slim"
        }
      },
      "end": "\\}{1,2}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.interpolation.end.slim"
        }
      },
      "name": "meta.interpolation.slim meta.string.ruby source.ruby.embedded.slim",
      "patterns": [
        {
          "include": "source.ruby"
        }
      ]
    },
    "root-class-id-tag": {
      "match": "(\\.)(([\\w-]|(?::(?!\\s)))+(/\\d+)?)|(#)(([\\w-]|(?::(?!\\s)))+(/\\d+)?)",
      "captures": {
        "1": {
          "name": "punctuation.definition.attribute.class.slim"
        },
        "2": {
          "name": "entity.other.attribute-name.class.html"
        },
        "5": {
          "name": "punctuation.definition.attribute.id.slim"
        },
        "6": {
          "name": "entity.other.attribute-name.id.html"
        }
      }
    },
    "ruby-attribute-array": {
      "begin": "(?=\\[)",
      "end": "(?<=\\])",
      "name": "meta.embedded.slim meta.string.ruby source.ruby.embedded.slim",
      "patterns": [
        {
          "include": "source.ruby"
        }
      ]
    },
    "ruby-attribute-hash": {
      "begin": "(?=\\{)",
      "end": "(?<=\\})",
      "name": "meta.embedded.slim meta.string.ruby source.ruby.embedded.slim",
      "patterns": [
        {
          "include": "source.ruby"
        }
      ]
    },
    "ruby-attribute-symbol-array": {
      "begin": "=?(?=:)",
      "end": "(?=\\s)|$",
      "name": "meta.embedded.slim meta.string.ruby source.ruby.embedded.slim",
      "patterns": [
        {
          "include": "source.ruby"
        }
      ]
    },
    "ruby-attribute-value": {
      "begin": "(?=\\b)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.separator.key-value.slim"
        }
      },
      "end": "(?=\\s)|$",
      "name": "meta.embedded.slim meta.string.ruby source.ruby.embedded.slim",
      "patterns": [
        {
          "include": "source.ruby"
        }
      ]
    },
    "rubyline": {
      "begin": "(==|=)(<>|><|<'|'<|<|>)?|-\\s*",
      "contentName": "meta.embedded.slim meta.string.ruby source.ruby.embedded.slim",
      "end": "(do\\s*\\n$)|(?<!\\\\|,|,\\n|\\\\\\n)$",
      "comment": "Hack to thwart Sublime's Ruby highlighter. It thinks do without a variable continues the next line (this can be muted with a / at the end of the line). For things like yields, do is unnecessary without an argument, so this hack will suffice",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.embedded.slim"
        },
        "2": {
          "name": "keyword.operator.whitespace.slim"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.control.start-block.ruby"
        }
      },
      "name": "meta.embedded.slim meta.line.ruby.slim",
      "patterns": [
        {
          "comment": "Hack to let ruby comments work in this context properly",
          "match": "#.*$",
          "name": "comment.line.number-sign.ruby"
        },
        {
          "include": "#continuation"
        },
        {
          "include": "source.ruby"
        }
      ]
    },
    "splat-attribute": {
      "patterns": [
        {
          "include": "#splat-attribute-hash"
        },
        {
          "include": "#splat-attribute-direct"
        }
      ]
    },
    "splat-attribute-direct": {
      "begin": "\\*",
      "end": "(?=\\s)|$",
      "name": "meta.embedded.slim source.ruby.embedded.slim",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.embedded.begin.ruby"
        }
      },
      "patterns": [
        {
          "include": "source.ruby"
        }
      ]
    },
    "splat-attribute-hash": {
      "begin": "\\*\\{",
      "end": "\\}",
      "name": "meta.embedded.slim source.ruby.embedded.slim",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.embedded.begin.ruby"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.embedded.end.ruby"
        }
      },
      "patterns": [
        {
          "include": "source.ruby"
        }
      ]
    },
    "string-double-quoted": {
      "begin": "(\")(?=.*(\"|\\\\?$))",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.html"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.html"
        }
      },
      "name": "meta.string.html string.quoted.double.html",
      "patterns": [
        {
          "include": "#interpolated-ruby"
        },
        {
          "include": "#entities"
        }
      ]
    },
    "string-single-quoted": {
      "begin": "(')(?=.*('|\\\\$))",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.html"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.html"
        }
      },
      "name": "meta.string.html string.quoted.single.html",
      "patterns": [
        {
          "include": "#interpolated-ruby"
        },
        {
          "include": "#entities"
        }
      ]
    },
    "tag-attribute": {
      "begin": "([\\w.#-]+)\\s*(==?)\\s*",
      "name": "meta.attribute-with-value.slim",
      "captures": {
        "1": {
          "name": "entity.other.attribute-name.slim"
        },
        "2": {
          "name": "punctuation.separator.key-value.slim"
        }
      },
      "end": "(?=(?::?\\s|\\)|\\]|\\}))|$",
      "patterns": [
        {
          "include": "#string-double-quoted"
        },
        {
          "include": "#string-single-quoted"
        },
        {
          "include": "#boolean-attribute-value"
        },
        {
          "include": "#delimited-ruby-group"
        },
        {
          "include": "#ruby-attribute-array"
        },
        {
          "include": "#ruby-attribute-hash"
        },
        {
          "include": "#ruby-attribute-symbol-array"
        },
        {
          "include": "#ruby-attribute-value"
        }
      ]
    },
    "verbatim-text": {
      "comment": "Verbatim text (can include HTML tags and copied lines)",
      "begin": "^(\\s*)([|'][<>]{0,2})\\s*",
      "beginCaptures": {
        "2": {
          "name": "punctuation.section.verbatim.slim"
        }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "contentName": "text.html.embedded.slim",
      "patterns": [
        {
          "include": "text.html.basic"
        },
        {
          "include": "#interpolated-ruby"
        }
      ]
    },
    "whitespace": {
      "match": "\\s+",
      "name": "text.html.embedded.whitespace.slim"
    },
    "whitespace-modifier": {
      "match": "\\>|\\<|\\<\\>|\\>\\<",
      "name": "keyword.operator.whitespace.slim"
    },
    "xml-namespace": {
      "match": "(:[\\w-]+)+",
      "name": "entity.name.tag.slim"
    }
  },
  "scopeName": "source.slim",
  "uuid": "36302CC1-1E76-4910-B7B6-F1915EBBA0D3"
}
